//
//  CatalogViewController.swift
//  TestExample
//
//  Created by Игорь Дикань on 19.01.2021.
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol CatalogDisplayLogic: class {
    func displayCatalog(_ viewModel: CatalogViewModel)
    func updateCatalog(_ viewModel: CatalogViewModel)
}

final class CatalogViewController: UIViewController {
    
    private var viewModel = CatalogViewModel()
    
    private lazy var catalogView: CatalogView = {
        let catalogView = CatalogView.fromNib()
        catalogView.delegate = self
        return catalogView
    }()
    
    
    // MARK: - IBOutlets
    
    // MARK: - External vars
    var interactor: CatalogBusinessLogic?
    var router: (NSObjectProtocol & CatalogRoutingLogic & CatalogDataPassing)?
    
    // MARK: - Internal vars

    // MARK: - Object lifecycle
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        CatalogConfigurator.shared.configure(self)
    }
  
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        CatalogConfigurator.shared.configure(self)
    }
  
    // MARK: - View lifecycle
    override func viewDidLoad() {
        super.viewDidLoad()
        setupView()
    }
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        interactor?.updateCatalog()
        catalogView.update()
    }
    
    // MARK: - IBActions
}

// MARK: - Display logic
extension CatalogViewController: CatalogDisplayLogic {
    
    func displayCatalog(_ viewModel: CatalogViewModel) {
        self.viewModel = viewModel
        catalogView.products = viewModel.products
        catalogView.update()
    }
    
    func updateCatalog(_ viewModel: CatalogViewModel) {
        self.viewModel = viewModel
        catalogView.products = viewModel.products
    }
}

// MARK: - CatalogView Delegate
extension CatalogViewController: CatalogViewDelegate {
    
    func passingProduct(data: CatalogViewModel.ProductModel?) {
        guard let productId = data?.productId, let data = data else {
            return
        }
        print(productId)
        router?.passingProduct(data)
    }
    
    func productDidSelect(_ model: CatalogViewModel.ProductModel) {
        router?.routeToProductBottomSheet(model)
    }
}

// MARK: - Private methods
private extension CatalogViewController {
    
    func setupView() {
        interactor?.prepareCatalog()
        setupSubViews()
        resetDefaults()
    }
    
    func resetDefaults() {
        let defaults = UserDefaults.standard
        let dictionary = defaults.dictionaryRepresentation()
        dictionary.keys.forEach { key in
            defaults.removeObject(forKey: key)
        }
    }
    
    func setupSubViews() {
        view.addSubView(catalogView)
        addConstrints()
    }
    
    func addConstrints() {
        catalogView.leadingAnchor.constraint(equalTo: view.leadingAnchor, constant: 0).isActive = true
        catalogView.topAnchor.constraint(equalTo: view.topAnchor, constant: 0).isActive = true
        catalogView.trailingAnchor.constraint(equalTo: view.trailingAnchor, constant: 0).isActive = true
        catalogView.bottomAnchor.constraint(equalTo: view.bottomAnchor, constant: 0).isActive = true
    }
}
