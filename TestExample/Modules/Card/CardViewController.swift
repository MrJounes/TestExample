//
//  CardViewController.swift
//  TestExample
//
//  Created by Игорь Дикань on 20.01.2021.
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol CardDisplayLogic: class {
    func displayProducts(with model: [CardProductModel])
}

final class CardViewController: UIViewController {
    
    // MARK: - IBOutlets
    @IBOutlet weak var tableView: UITableView!
    
    // MARK: - External vars
    var interactor: CardBusinessLogic?
    var router: (NSObjectProtocol & CardRoutingLogic & CardDataPassing)?
    
    // MARK: - Internal vars
    private var products: [CardProductModel] = []

    // MARK: - Object lifecycle
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        CardConfigurator.shared.configure(self)
    }
  
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        CardConfigurator.shared.configure(self)
    }
  
    // MARK: - View lifecycle
    override func viewDidLoad() {
        super.viewDidLoad()
        setupView()
    }
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        interactor?.fetchProducts()
    }
    
    // MARK: - IBActions
}

// MARK: - Display logic
extension CardViewController: CardDisplayLogic {
    
    func displayProducts(with model: [CardProductModel]) {
        products = model
        tableView.reloadData()
    }
}

extension CardViewController: UITableViewDataSource {
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return products.count
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        guard let cell = tableView.dequeueReusableCell(withIdentifier: CardCell.reuseId, for: indexPath) as? CardCell else {
            return UITableViewCell()
        }
        cell.setupCell(with: products[indexPath.row])
        cell.delegate = self
        return cell
    }
}

extension CardViewController: CardCellDelegate {
    
    func updateTable() {
        interactor?.fetchProducts()
    }
}

extension CardViewController: UITableViewDelegate {
    
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        tableView.deselectRow(at: indexPath, animated: true)
    }
}

// MARK: - Private methods
private extension CardViewController {
    
    func setupView() {
        setupTableView()
    }
    
    func setupTableView() {
        tableView.dataSource = self
        tableView.delegate = self
        tableView.register(UINib(nibName: CardCell.nibName, bundle: nil), forCellReuseIdentifier: CardCell.reuseId)
    }
}
